"use strict";(self.webpackChunkmodlib_docs=self.webpackChunkmodlib_docs||[]).push([[5637],{8188:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>a});const l=JSON.parse('{"id":"models/model","title":"Model","description":"MODEL_TYPE","source":"@site/_api_versioned_docs/version-1.0.0/models/model.md","sourceDirName":"models","slug":"/models/model","permalink":"/en/application-module-library/docs/api-reference/1.0.0/models/model","draft":false,"unlisted":false,"tags":[],"version":"1.0.0","lastUpdatedAt":1750065085000,"sidebarPosition":0,"frontMatter":{"title":"Model","sidebar_position":0},"sidebar":"tutorialSidebar","previous":{"title":"Models","permalink":"/en/application-module-library/docs/api-reference/1.0.0/category/models"},"next":{"title":"Post Processors","permalink":"/en/application-module-library/docs/api-reference/1.0.0/models/post_processors"}}');var i=n(4848),r=n(8453);const o={title:"Model",sidebar_position:0},t=void 0,d={},a=[{value:"MODEL_TYPE",id:"model_type",level:2},{value:"COLOR_FORMAT",id:"color_format",level:2},{value:"Model",id:"model",level:2},{value:"Properties",id:"properties",level:3},{value:"Methods",id:"methods",level:3},{value:'<span class="signature-title">__init__</span>',id:"__init__",level:4},{value:'<span class="signature-title">post_process</span>',id:"post_process",level:4},{value:'<span class="signature-title">pre_process</span>',id:"pre_process",level:4}];function c(e){const s={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)("div",{className:"module-separator","data-content":"Dataclass"}),"\n",(0,i.jsx)(s.h2,{id:"model_type",children:"MODEL_TYPE"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)("div",{className:"signature",children:(0,i.jsx)("b",{children:"MODEL_TYPE"})}),"\nRepresentation of the available model types corresponding to the provided model file.\nCan be used as e.g. ",(0,i.jsx)(s.code,{children:"MODEL_TYPE.KERAS"})]}),"\n",(0,i.jsx)("div",{}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)("span",{className:"signature-title",children:"KERAS"}),"\xa0\xa0\xa0\xa0Quantized Keras models (*.keras)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)("span",{className:"signature-title",children:"ONNX"}),"\xa0\xa0\xa0\xa0Quantized ONNX models (*.onnx)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)("span",{className:"signature-title",children:"CONVERTED"}),"\xa0\xa0\xa0\xa0Converted models by the imx500 converter (*.zip)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)("span",{className:"signature-title",children:"RPK_PACKAGED"}),"\xa0\xa0\xa0\xa0Packaged models by the imx500 packager (*.rpk)"]}),"\n"]}),"\n",(0,i.jsx)("div",{className:"module-separator","data-content":"Dataclass"}),"\n",(0,i.jsx)(s.h2,{id:"color_format",children:"COLOR_FORMAT"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)("div",{className:"signature",children:(0,i.jsx)("b",{children:"COLOR_FORMAT"})}),"\nRepresentation of the available color formats the provided model is trained in.\nCan be used as e.g. ",(0,i.jsx)(s.code,{children:"COLOR_FORMAT.RGB"})]}),"\n",(0,i.jsx)("div",{}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)("span",{className:"signature-title",children:"RGB"}),"\xa0\xa0\xa0\xa0"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)("span",{className:"signature-title",children:"BGR"}),"\xa0\xa0\xa0\xa0"]}),"\n"]}),"\n",(0,i.jsx)("div",{className:"module-separator","data-content":"Class"}),"\n",(0,i.jsx)(s.h2,{id:"model",children:"Model"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsxs)("div",{className:"signature",children:[(0,i.jsx)("b",{children:"Model("}),"model_file:\xa0pathlib.Path\xa0=\xa0None, model_type:\xa0",(0,i.jsx)(s.a,{href:"../models/model#model_type",children:"MODEL_TYPE"}),"\xa0=\xa0None, color_format:\xa0",(0,i.jsx)(s.a,{href:"../models/model#color_format",children:"COLOR_FORMAT"}),"\xa0=\xa0'RGB', preserve_aspect_ratio:\xa0bool\xa0=\xa0True",(0,i.jsx)("b",{children:")"})]}),"\nAbstract base class for models the Application Module Library."]}),"\n",(0,i.jsx)(s.p,{children:"Can be used as a base class to create custom models.\nWhen creating a custom model, make sure to always:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Initialise the base arguments ",(0,i.jsx)(s.code,{children:"model_file"}),", ",(0,i.jsx)(s.code,{children:"model_type"}),", ",(0,i.jsx)(s.code,{children:"color_format"})," and ",(0,i.jsx)(s.code,{children:"preserve_aspect_ratio"})]}),"\n",(0,i.jsx)(s.li,{children:"Always implement a post_processor function that returns one of the result types."}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"For example, a custom classifier could be created like this."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:'from modlib.models import COLOR_FORMAT, MODEL_TYPE, Model, Classifications\nfrom modlib.models.post_processors import pp_cls\n\nclass CustomClassifier(Model):\n    def __init__(self):\n        super().__init__(\n            model_file="./path/to/network.rpk",\n            model_type=MODEL_TYPE.RPK_PACKAGED,\n            color_format=COLOR_FORMAT.RGB,\n            preserve_aspect_ratio=False,\n        )\n\n    def post_process(self, output_tensors) -> Classifications:\n        return pp_cls(output_tensors)\n'})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Descendants"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"../models/zoo#deeplabv3plus",children:"DeepLabV3Plus"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"../models/zoo#efficientdetlite0",children:"EfficientDetLite0"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"../models/zoo#efficientnetb0",children:"EfficientNetB0"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"../models/zoo#efficientnetlite0",children:"EfficientNetLite0"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"../models/zoo#efficientnetv2b0",children:"EfficientNetV2B0"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"../models/zoo#efficientnetv2b1",children:"EfficientNetV2B1"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"../models/zoo#efficientnetv2b2",children:"EfficientNetV2B2"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"../models/zoo#higherhrnet",children:"Higherhrnet"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"../models/zoo#inputtensoronly",children:"InputTensorOnly"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"../models/zoo#mnasnet1_0",children:"MNASNet1_0"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"../models/zoo#mobilenetv2",children:"MobileNetV2"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"../models/zoo#mobilevitxs",children:"MobileViTXS"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"../models/zoo#mobilevitxxs",children:"MobileViTXXS"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"../models/zoo#nanodetplus416x416",children:"NanoDetPlus416x416"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"../models/zoo#posenet",children:"Posenet"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"../models/zoo#regnetx002",children:"RegNetX002"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"../models/zoo#regnety002",children:"RegNetY002"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"../models/zoo#regnety004",children:"RegNetY004"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"../models/zoo#resnet18",children:"ResNet18"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"../models/zoo#ssdmobilenetv2fpnlite320x320",children:"SSDMobileNetV2FPNLite320x320"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"../models/zoo#shufflenetv2x1_5",children:"ShuffleNetV2X1_5"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"../models/zoo#squeezenet1_0",children:"SqueezeNet1_0"})}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"properties",children:"Properties"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)("span",{className:"signature-title",children:"input_tensor_size"}),"\xa0\xa0\xa0\xa0The input tensor size (width, height) of the model.\nOnly available after calling ",(0,i.jsx)(s.code,{children:"_get_network_info"})," on the model's info file."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)("span",{className:"signature-title",children:"output_tensor_sizes"}),"\xa0\xa0\xa0\xa0The output tensor sizes the model returns.\nOnly available after calling ",(0,i.jsx)(s.code,{children:"_get_network_info"})," on the model's info file."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(s.h4,{id:"__init__",children:(0,i.jsx)("span",{className:"signature-title",children:"__init__"})}),"\n",(0,i.jsxs)("div",{className:"signature",children:[(0,i.jsx)("b",{children:"__init__("}),"self, model_file:\xa0pathlib.Path\xa0=\xa0None, model_type:\xa0",(0,i.jsx)(s.a,{href:"../models/model#model_type",children:"MODEL_TYPE"}),"\xa0=\xa0None, color_format:\xa0",(0,i.jsx)(s.a,{href:"../models/model#color_format",children:"COLOR_FORMAT"}),"\xa0=\xa0'RGB', preserve_aspect_ratio:\xa0bool\xa0=\xa0True",(0,i.jsx)("b",{children:")"})]}),"\n",(0,i.jsx)(s.p,{children:"Initialisation of the model base class."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Args:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"model_file"})," (pathlib.Path\xa0=\xa0None): The path to the model file."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"model_type"})," (",(0,i.jsx)(s.a,{href:"../models/model#model_type",children:"MODEL_TYPE"}),"\xa0=\xa0None): The type of the model."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"color_format"})," (",(0,i.jsx)(s.a,{href:"../models/model#color_format",children:"COLOR_FORMAT"}),"\xa0=\xa0'RGB'): The color format of the model."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"preserve_aspect_ratio"})," (bool\xa0=\xa0True): Setting the sensor whether or not to preserve aspect ratio of the input tensor."]}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"post_process",children:(0,i.jsx)("span",{className:"signature-title",children:"post_process"})}),"\n",(0,i.jsxs)("div",{className:"signature",children:[(0,i.jsx)("b",{children:"post_process("}),"self, output_tensors:\xa0List[numpy.ndarray]",(0,i.jsx)("b",{children:")"})," \u2011> Union[",(0,i.jsx)(s.a,{href:"../models/results#classifications",children:"Classifications"}),",\xa0",(0,i.jsx)(s.a,{href:"../models/results#detections",children:"Detections"}),",\xa0",(0,i.jsx)(s.a,{href:"../models/results#poses",children:"Poses"}),",\xa0",(0,i.jsx)(s.a,{href:"../models/results#segments",children:"Segments"}),",\xa0",(0,i.jsx)(s.a,{href:"../models/results#anomaly",children:"Anomaly"}),"]"]}),"\n",(0,i.jsx)(s.p,{children:"Perform post-processing on the tensor data and tensor layout."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Args:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"output_tensors"})," (List[numpy.ndarray]): Resulting output tensors to be processed."]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Returns:"})," (Union[",(0,i.jsx)(s.a,{href:"../models/results#classifications",children:"Classifications"}),",\xa0",(0,i.jsx)(s.a,{href:"../models/results#detections",children:"Detections"}),",\xa0",(0,i.jsx)(s.a,{href:"../models/results#poses",children:"Poses"}),",\xa0",(0,i.jsx)(s.a,{href:"../models/results#segments",children:"Segments"}),",\xa0",(0,i.jsx)(s.a,{href:"../models/results#anomaly",children:"Anomaly"}),"])",(0,i.jsx)(s.br,{}),"\n","The post-processed detections."]}),"\n",(0,i.jsx)(s.h4,{id:"pre_process",children:(0,i.jsx)("span",{className:"signature-title",children:"pre_process"})}),"\n",(0,i.jsxs)("div",{className:"signature",children:[(0,i.jsx)("b",{children:"pre_process("}),"self, image:\xa0numpy.ndarray",(0,i.jsx)("b",{children:")"})," \u2011> Tuple[numpy.ndarray,\xa0numpy.ndarray]"]}),"\n",(0,i.jsxs)(s.p,{children:["Optional pre-processing function the model requires for the input image.",(0,i.jsx)(s.br,{}),"\n","The pre-processing function is mimicing the SPI camera functionality,",(0,i.jsx)(s.br,{}),"\n","and is only used for data-injection and on Interpreter devices."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Args:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"image"})," (numpy.ndarray): The input image to be processed."]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Returns:"})," (Tuple[numpy.ndarray,\xa0numpy.ndarray])",(0,i.jsx)(s.br,{}),"\n","A tuple containing:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Preprocessed image as a NumPy array (input_tensor_image)."}),"\n",(0,i.jsx)(s.li,{children:"Input tensor ready for model inference."}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>t});var l=n(6540);const i={},r=l.createContext(i);function o(e){const s=l.useContext(r);return l.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function t(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),l.createElement(r.Provider,{value:s},e.children)}}}]);