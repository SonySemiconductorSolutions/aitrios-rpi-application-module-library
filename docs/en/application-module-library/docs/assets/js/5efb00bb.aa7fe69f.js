"use strict";(self.webpackChunkmodlib_docs=self.webpackChunkmodlib_docs||[]).push([[1369],{8374:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"devices/utils","title":"Utils","description":"This page combines the API reference for:","source":"@site/_api_versioned_docs/version-1.1.0/devices/utils.md","sourceDirName":"devices","slug":"/devices/utils","permalink":"/en/application-module-library/docs/api-reference/devices/utils","draft":false,"unlisted":false,"tags":[],"version":"1.1.0","lastUpdatedAt":1749815802000,"sidebarPosition":7,"frontMatter":{"title":"Utils","sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Triton","permalink":"/en/application-module-library/docs/api-reference/devices/triton"},"next":{"title":"Models","permalink":"/en/application-module-library/docs/api-reference/category/models"}}');var s=r(4848),t=r(8453);const l={title:"Utils",sidebar_position:7},d=void 0,o={},c=[{value:'<span class="signature-title">run_shell_command</span>',id:"run_shell_command",level:2},{value:'<span class="signature-title">check_dir_required</span>',id:"check_dir_required",level:2},{value:"IMX500Converter",id:"imx500converter",level:2},{value:"Methods",id:"methods",level:3},{value:'<span class="signature-title">__init__</span>',id:"__init__",level:4},{value:'<span class="signature-title">run</span>',id:"run",level:4}];function a(e){const n={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"This page combines the API reference for:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"modlib.devices.utils.common"}),"\n",(0,s.jsx)(n.li,{children:"modlib.devices.utils.imx500_converter"}),"\n"]}),"\n",(0,s.jsx)("div",{className:"module-separator","data-content":"Function"}),"\n",(0,s.jsx)(n.h2,{id:"run_shell_command",children:(0,s.jsx)("span",{className:"signature-title",children:"run_shell_command"})}),"\n",(0,s.jsxs)("div",{className:"signature",children:[(0,s.jsx)("b",{children:"run_shell_command("}),"command:\xa0str",(0,s.jsx)("b",{children:")"})]}),"\n",(0,s.jsx)(n.p,{children:"Run shell command with output log and checking return code."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Args:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"command"})," (str): The shell command to be executed."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Raises:"}),(0,s.jsx)(n.br,{}),"\n","subprocess.CalledProcessError: If the return code of the command is non-zero."]}),"\n",(0,s.jsx)("div",{className:"module-separator","data-content":"Function"}),"\n",(0,s.jsx)(n.h2,{id:"check_dir_required",children:(0,s.jsx)("span",{className:"signature-title",children:"check_dir_required"})}),"\n",(0,s.jsxs)("div",{className:"signature",children:[(0,s.jsx)("b",{children:"check_dir_required("}),"dir:\xa0pathlib.Path, required_patterns:\xa0List[str]",(0,s.jsx)("b",{children:")"})]}),"\n",(0,s.jsx)(n.p,{children:"Check if a directory contains all the required files or directories based on the given patterns."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Args:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"dir"})," (pathlib.Path): The directory to check."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"required_patterns"})," (List[str]): A list of patterns (files or directories) that should be present."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Raises:"}),(0,s.jsx)(n.br,{}),"\n","AssertionError: If the directory is not found at the specified path.",(0,s.jsx)(n.br,{}),"\n","AssertionError: If any of the required files or directories are missing in the directory."]}),"\n",(0,s.jsx)("div",{className:"module-separator","data-content":"Class"}),"\n",(0,s.jsx)(n.h2,{id:"imx500converter",children:"IMX500Converter"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsxs)("div",{className:"signature",children:[(0,s.jsx)("b",{children:"IMX500Converter("}),(0,s.jsx)("b",{children:")"})]}),"\nHelper class for converting a Model to IMX500 accepted format.\nConverts a KERAS or ONNX model to a ",(0,s.jsx)(n.code,{children:"packerOut.zip"})," file ready for packaging."]}),"\n",(0,s.jsx)(n.p,{children:"Required dependencies are automatically installed into a dedicated virtual environment and depent on its model type:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["KERAS models: require ",(0,s.jsx)(n.code,{children:"imx500-converter[tf]"})," and is automatically installed in ",(0,s.jsx)(n.code,{children:"~/.modlib/.venv-imx500-converter-tf"})]}),"\n",(0,s.jsxs)(n.li,{children:["ONNX models: require ",(0,s.jsx)(n.code,{children:"imx500-converter[pt]"})," and is automatically installed in ",(0,s.jsx)(n.code,{children:"~/.modlib/.venv-imx500-converter-pt"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'converter = IMX500Converter()\nconverter.run(\n    model_file="./path/to/model.keras",\n    model_type=MODEL_TYPE.KERAS,\n    output_dir="./pack"\n)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(n.h4,{id:"__init__",children:(0,s.jsx)("span",{className:"signature-title",children:"__init__"})}),"\n",(0,s.jsxs)("div",{className:"signature",children:[(0,s.jsx)("b",{children:"__init__("}),"self",(0,s.jsx)("b",{children:")"})]}),"\n",(0,s.jsx)(n.p,{children:"Initialisation of the IMX500Converter."}),"\n",(0,s.jsx)(n.h4,{id:"run",children:(0,s.jsx)("span",{className:"signature-title",children:"run"})}),"\n",(0,s.jsxs)("div",{className:"signature",children:[(0,s.jsx)("b",{children:"run("}),"self, model_file:\xa0pathlib.Path, model_type:\xa0",(0,s.jsx)(n.a,{href:"../models/model#model_type",children:"MODEL_TYPE"}),", output_dir:\xa0pathlib.Path, overwrite:\xa0Optional[bool]\xa0=\xa0None",(0,s.jsx)("b",{children:")"})]}),"\n",(0,s.jsx)(n.p,{children:"Run the converter in its dedicated virtual environment corresponding to the model type."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Args:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"model_file"})," (pathlib.Path): Path to the model file to be converted."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"model_type"})," (",(0,s.jsx)(n.a,{href:"../models/model#model_type",children:"MODEL_TYPE"}),"): Model type of the provided model to be converted."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"output_dir"})," (pathlib.Path): The directory where the converted ",(0,s.jsx)(n.code,{children:"packerOut.zip"})," file will be saved."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"overwrite"})," (Optional[bool]\xa0=\xa0None): If None, prompts the user for input. If True, overwrites the output directory if it exists.\nIf False, aborts if the directory exists."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>d});var i=r(6540);const s={},t=i.createContext(s);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);