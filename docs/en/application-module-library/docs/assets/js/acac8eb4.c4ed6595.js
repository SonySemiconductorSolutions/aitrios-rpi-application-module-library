"use strict";(self.webpackChunkmodlib_docs=self.webpackChunkmodlib_docs||[]).push([[7352],{9477:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"apps/calculate","title":"Calculate","description":"estimate&#95;angle","source":"@site/_api_versioned_docs/version-1.1.0/apps/calculate.md","sourceDirName":"apps","slug":"/apps/calculate","permalink":"/en/application-module-library/docs/api-reference/apps/calculate","draft":false,"unlisted":false,"tags":[],"version":"1.1.0","lastUpdatedAt":1750065085000,"sidebarPosition":3,"frontMatter":{"title":"Calculate","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Blur","permalink":"/en/application-module-library/docs/api-reference/apps/blur"},"next":{"title":"Heatmap","permalink":"/en/application-module-library/docs/api-reference/apps/heatmap"}}');var i=s(4848),a=s(8453);const l={title:"Calculate",sidebar_position:3},r=void 0,c={},d=[{value:'<span class="signature-title">estimate_angle</span>',id:"estimate_angle",level:2},{value:'<span class="signature-title">calculate_distance</span>',id:"calculate_distance",level:2},{value:'<span class="signature-title">calculate_distance_matrix</span>',id:"calculate_distance_matrix",level:2},{value:"SpeedCalculator",id:"speedcalculator",level:2},{value:"Attributes",id:"attributes",level:3},{value:"Methods",id:"methods",level:3},{value:'<span class="signature-title">__init__</span>',id:"__init__",level:4},{value:'<span class="signature-title">calculate</span>',id:"calculate",level:4},{value:'<span class="signature-title">speed_instance</span>',id:"speed_instance",level:4},{value:'<span class="signature-title">check_segment</span>',id:"check_segment",level:4},{value:'<span class="signature-title">orientation</span>',id:"orientation",level:4},{value:'<span class="signature-title">intersect</span>',id:"intersect",level:4},{value:'<span class="signature-title">get_speed</span>',id:"get_speed",level:4}];function o(e){const n={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)("div",{className:"module-separator","data-content":"Function"}),"\n",(0,i.jsx)(n.h2,{id:"estimate_angle",children:(0,i.jsx)("span",{className:"signature-title",children:"estimate_angle"})}),"\n",(0,i.jsxs)("div",{className:"signature",children:[(0,i.jsx)("b",{children:"estimate_angle("}),"k, focus_points, height, width",(0,i.jsx)("b",{children:")"})]}),"\n",(0,i.jsx)(n.p,{children:"Calculate the angle of the chosen keypoints"}),"\n",(0,i.jsx)("div",{className:"module-separator","data-content":"Function"}),"\n",(0,i.jsx)(n.h2,{id:"calculate_distance",children:(0,i.jsx)("span",{className:"signature-title",children:"calculate_distance"})}),"\n",(0,i.jsxs)("div",{className:"signature",children:[(0,i.jsx)("b",{children:"calculate_distance("}),"point1:\xa0Tuple[float,\xa0float], point2:\xa0Tuple[float,\xa0float]",(0,i.jsx)("b",{children:")"})," \u2011> float"]}),"\n",(0,i.jsx)(n.p,{children:"Calculates the distance between 2 given points."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Args:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"point1"})," (Tuple[float,\xa0float]): Tuple of x and y coordinates for a point"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"point2"})," (Tuple[float,\xa0float]): Tuple of x and y coordinates for a point"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," (float)",(0,i.jsx)(n.br,{}),"\n","Euclidean Distance between the 2 points"]}),"\n",(0,i.jsx)("div",{className:"module-separator","data-content":"Function"}),"\n",(0,i.jsx)(n.h2,{id:"calculate_distance_matrix",children:(0,i.jsx)("span",{className:"signature-title",children:"calculate_distance_matrix"})}),"\n",(0,i.jsxs)("div",{className:"signature",children:[(0,i.jsx)("b",{children:"calculate_distance_matrix("}),"x:\xa0numpy.ndarray, y:\xa0numpy.ndarray",(0,i.jsx)("b",{children:")"})," \u2011> numpy.ndarray"]}),"\n",(0,i.jsx)(n.p,{children:"Calculates a pairwise distance matrix between points defined by their x and y coordinates."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"x = np.array([0, 1, 2])  \ny = np.array([0, 1, 2])  \ndistances = calculate_distance_matrix(x, y)  \n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Args:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"x"})," (numpy.ndarray): Array of x-coordinates for the points."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"y"})," (numpy.ndarray): Array of y-coordinates for the points."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," (numpy.ndarray)",(0,i.jsx)(n.br,{}),"\n","np.ndarray: A square matrix where element [i,j] represents the Euclidean distance",(0,i.jsx)(n.br,{}),"\n","between point i and point j. The matrix is symmetric with zeros on the diagonal."]}),"\n",(0,i.jsx)("div",{className:"module-separator","data-content":"Class"}),"\n",(0,i.jsx)(n.h2,{id:"speedcalculator",children:"SpeedCalculator"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)("div",{className:"signature",children:[(0,i.jsx)("b",{children:"SpeedCalculator("}),"region:\xa0List[Tuple[float,\xa0float]]\xa0=\xa0[(0, 0), (1, 0), (1, 1), (0, 1)]",(0,i.jsx)("b",{children:")"})]}),"\nCalculates the speed of a moving objects and holds all tracked information.\nUses bbox centers to calculate the change of distance over time\nFor example, calculate the speed of object like:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"from unify.apps.calculate import SpeedCalculator\n\nregion = [(0.49, 0.0), (0.51, 0.0), (0.51, 1.0), (0.49, 1.0)]\nspeed = SpeedCalculator(region)\n\ndetections = tracker.update(frame, detections)\nspeed.calculate(frame, detections)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"attributes",children:"Attributes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("span",{className:"signature-title",children:"region: List[Tuple[float,\xa0float]]"}),"\xa0\xa0\xa0\xa0Points defining the polygon speed area e.g. [(x1, y1), (x2, y2), ...]"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(n.h4,{id:"__init__",children:(0,i.jsx)("span",{className:"signature-title",children:"__init__"})}),"\n",(0,i.jsxs)("div",{className:"signature",children:[(0,i.jsx)("b",{children:"__init__("}),"self, region:\xa0List[Tuple[float,\xa0float]]\xa0=\xa0[(0, 0), (1, 0), (1, 1), (0, 1)]",(0,i.jsx)("b",{children:")"})]}),"\n",(0,i.jsx)(n.p,{children:"Initialize self.  See help(type(self)) for accurate signature."}),"\n",(0,i.jsx)(n.h4,{id:"calculate",children:(0,i.jsx)("span",{className:"signature-title",children:"calculate"})}),"\n",(0,i.jsxs)("div",{className:"signature",children:[(0,i.jsx)("b",{children:"calculate("}),"self, frame:\xa0",(0,i.jsx)(n.a,{href:"../devices/frame#frame",children:"Frame"}),", detections:\xa0",(0,i.jsx)(n.a,{href:"../models/results#detections",children:"Detections"}),(0,i.jsx)("b",{children:")"})]}),"\n",(0,i.jsxs)(n.p,{children:["Calculates the speed of detections by calculating the distance travelled over time.",(0,i.jsx)(n.br,{}),"\n","While also storing tracked historic information to calculate the average speed in a given area."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Args:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"frame"})," (",(0,i.jsx)(n.a,{href:"../devices/frame#frame",children:"Frame"}),"): The current frame from camera"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"detections"})," (",(0,i.jsx)(n.a,{href:"../models/results#detections",children:"Detections"}),"): The set of Detections to check if the are in defined area."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"speed_instance",children:(0,i.jsx)("span",{className:"signature-title",children:"speed_instance"})}),"\n",(0,i.jsxs)("div",{className:"signature",children:[(0,i.jsx)("b",{children:"speed_instance("}),"self, timestamp1:\xa0str, timestamp2:\xa0str, p1:\xa0Tuple, p2:\xa0Tuple",(0,i.jsx)("b",{children:")"})," \u2011> float"]}),"\n",(0,i.jsx)(n.p,{children:"Calculates the speed of a object that has travelled between the 2 given points."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Args:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"timestamp1"})," (str): timestamp of the current frame"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"timestamp2"})," (str): timestamp of a previous frame"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"p1"})," (Tuple): current point of the object"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"p2"})," (Tuple): a previous point of the object"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," (float)",(0,i.jsx)(n.br,{}),"\n","Speed of the object"]}),"\n",(0,i.jsx)(n.h4,{id:"check_segment",children:(0,i.jsx)("span",{className:"signature-title",children:"check_segment"})}),"\n",(0,i.jsxs)("div",{className:"signature",children:[(0,i.jsx)("b",{children:"check_segment("}),"self, a:\xa0Tuple, b:\xa0Tuple, c:\xa0Tuple",(0,i.jsx)("b",{children:")"})," \u2011> bool"]}),"\n",(0,i.jsx)(n.p,{children:"Check to see if point is on segment on line"}),"\n",(0,i.jsx)(n.h4,{id:"orientation",children:(0,i.jsx)("span",{className:"signature-title",children:"orientation"})}),"\n",(0,i.jsxs)("div",{className:"signature",children:[(0,i.jsx)("b",{children:"orientation("}),"self, a:\xa0Tuple, b:\xa0Tuple, c:\xa0Tuple",(0,i.jsx)("b",{children:")"})," \u2011> int"]}),"\n",(0,i.jsx)(n.p,{children:"Calculate the vector and its orientation in 2D space"}),"\n",(0,i.jsx)(n.h4,{id:"intersect",children:(0,i.jsx)("span",{className:"signature-title",children:"intersect"})}),"\n",(0,i.jsxs)("div",{className:"signature",children:[(0,i.jsx)("b",{children:"intersect("}),"self, lineA:\xa0Tuple, lineB:\xa0Tuple, h:\xa0int, w:\xa0int",(0,i.jsx)("b",{children:")"})," \u2011> bool"]}),"\n",(0,i.jsx)(n.p,{children:"Calculate if a line intersects area"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Args:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"lineA"})," (Tuple): line of current object point and previous object point"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"lineB"})," (Tuple): List of points that define the region"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"h"})," (int): height of frame"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"w"})," (int): width of frame"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," (bool)",(0,i.jsx)(n.br,{}),"\n","If lineA intersects the area defined by lineB"]}),"\n",(0,i.jsx)(n.h4,{id:"get_speed",children:(0,i.jsx)("span",{className:"signature-title",children:"get_speed"})}),"\n",(0,i.jsxs)("div",{className:"signature",children:[(0,i.jsx)("b",{children:"get_speed("}),"self, t:\xa0int, average:\xa0bool\xa0=\xa0False",(0,i.jsx)("b",{children:")"})," \u2011> float\xa0|\xa0None"]}),"\n",(0,i.jsx)(n.p,{children:"Get speed by tracker ID."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Args:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"t"})," (int): Tracker ID to get speed for"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"average"})," (bool\xa0=\xa0False): Indicating whether to eturn the average or instantaneous speed"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," (float\xa0|\xa0None)",(0,i.jsx)(n.br,{}),"\n","Speed value in pixels per second, or None when tracker ID is invalid (-1) or not found."]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>r});var t=s(6540);const i={},a=t.createContext(i);function l(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);